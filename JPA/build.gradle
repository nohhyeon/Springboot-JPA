plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.0'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'war'
    id 'eclipse'
}

group = 'su.boot'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

// Spring Boot 및 테스트 관련 의존성 설정
dependencies {
     // 기본적인 Spring Boot 기능을 제공한다.
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    // JSP 지원을 위한 Tomcat Jasper 제공하며 JSP 파일을 자바 서블릿으로 변환하고 이를 컴파일한다.
    implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'
    // Servlet API 의존성을 제공된 런타임으로 설정하며 서블릿 컨테이너가 제공하므로 별도로 패키징하지 않는다.
    // runtimeOnly 'jakarta.servlet:jakarta.servlet-api:6.0.0' // 이 의존성 제거
    // JSP API 의존성을 제공된 런타임으로 설정하며 서블릿 컨테이너가 제공하므로 별도로 패키징하지 않는다.
    // runtimeOnly 'jakarta.servlet.jsp:jakarta.servlet.jsp-api:3.1.1' // 이 의존성 제거
    // JSP 표준 태그 라이브러리를 제공한다.
    implementation 'jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api:3.0.0'
    // Glassfish 구현체를 사용하며 Glassfish 구현체는 Jakarta EE의 모든 주요 사양을 구현한다.
    implementation 'org.glassfish.web:jakarta.servlet.jsp.jstl:3.0.1'
    // Jakarta 어노테이션 기능을 제공한다.
    implementation 'jakarta.annotation:jakarta.annotation-api:3.0.0'
    // 개발 환경에서 유용한 기능을 제공한다.
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    // Spring Boot에서는 이미 log4j2를 사용하므로, slf4j-log4j12 제거
    // Lombok 라이브러리를 컴파일 시에만 사용하도록 설정한다.
    compileOnly 'org.projectlombok:lombok:1.18.30'
    //Lombok 어노테이션을 처리하기 위한 어노테이션 프로세서를 설정한다.
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    //섬네일을 쉽게 생성하며 다양한 이미지 형식을 지원하고 이미지 리사이징, 크롭, 회전 등의 기능을 제공한다.
    implementation 'net.coobird:thumbnailator:0.4.20'
    //Spring의 다양한 기능을 지원하는 부가 모듈을 추가한다.
    implementation 'org.springframework:spring-context-support'
    //Jakarta Mail API를 사용하여 이메일 기능을 구현하기 위한 라이브러리를 추가한다.
    implementation 'com.sun.mail:jakarta.mail:2.0.1'
    //Spring Boot에서 이메일 전송 기능을 쉽게 구현할 수 있도록 지원하는 스타터 의존성을 추가한다.
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    //스프링 부트 애플리케이션에서 JDBC를 사용하기 위한 기본 설정과 유틸리티를 제공한다.
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    //Oracle 데이터베이스와 연결하고 JDK11, JDK17, JDK19, JDK21를 지원한다.
    implementation 'com.oracle.database.jdbc:ojdbc11:23.3.0.23.09'
    // 고성능 JDBC 커넥션 풀을 제공한다
    implementation 'com.zaxxer:HikariCP:5.1.0'
    // SQL 쿼리와 JDBC 작업을 로그로 기록한다.
    implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'
    //마이바티스를 쉽게 설정하고 사용할 수 있도록 지원한다.
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.3'
    //Spring Data JPA를 사용하여 데이터베이스와 상호작용하는 데 필요한 내용을 지원한다.
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.hibernate.orm:hibernate-core:6.5.2.Final'
    implementation 'jakarta.inject:jakarta.inject-api:2.0.0'





    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    //providedRuntime으로 설정하여 WAR 파일에 Tomcat 라이브러리를 포함하지 않도록 해야 한다.
}


tasks.named('test') {
    useJUnitPlatform()
}


// Eclipse 플러그인을 설정한다.
eclipse {
    // Eclipse WTP(Web Tools Platform)를 설정한다.
    wtp {
        // 프로젝트의 특성(facets)을 설정한다.
        facet {
            // 웹 프로젝트 특성을 jst.web 6.0으로 설정한다.
            facet name: 'jst.web', version: '6.0'
            // 자바 프로젝트 특성을 자바 17로 설정한다.
            facet name: 'java', version: '17'
        }
    }
}

sourceSets {
    main {
        resources {
            exclude 'templates/**'
            exclude 'static/**'
        }
    }
}

tasks.withType(JavaCompile) {
    // 인코딩을 설정한다.
    options.encoding = 'UTF-8'
    // 추가 인수를 전달한다.
    options.compilerArgs << '-parameters'
}

tasks.named('bootJar') {
    enabled = false
}

tasks.named('war') {
    enabled = true
}
